name: dockercompose37235877509304208
services:
  elasticsearch:
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx1024m
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    networks:
      elk: null
    ports:
      - mode: ingress
        target: 9200
        published: "9200"
        protocol: tcp
    volumes:
      - type: bind
        source: D:\aspdotnet\SEServer\elasticsearch
        target: /usr/share/elasticsearch/data
        bind:
          create_host_path: true
  kibana:
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_started
        required: true
    image: docker.elastic.co/kibana/kibana:7.14.0
    networks:
      elk: null
    ports:
      - mode: ingress
        target: 5601
        published: "5601"
        protocol: tcp
  logstash:
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_started
        required: true
    image: docker.elastic.co/logstash/logstash:7.14.0
    networks:
      elk: null
    ports:
      - mode: ingress
        target: 5000
        published: "5000"
        protocol: tcp
    volumes:
      - type: bind
        source: D:\aspdotnet\SEServer\logstash\config
        target: /etc/logstash/config
        bind:
          create_host_path: true
      - type: bind
        source: D:\aspdotnet\SEServer\logstash\pipeline
        target: /etc/logstash/pipeline
        bind:
          create_host_path: true
  redis:
    container_name: redis
    image: redis:latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 6379
        published: "5379"
        protocol: tcp
  seserver-auth:
    build:
      context: D:\aspdotnet\SEServer
      dockerfile: src/services/SEServer.Auth/SEServer.Auth/Dockerfile
    container_name: seserver-auth
    depends_on:
      sqlserver:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://0.0.0.0:80
    image: seserverauth
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "5103"
        protocol: tcp
      - mode: ingress
        target: 50001
        published: "50001"
        protocol: tcp
  seserver-auth-dapr:
    command:
      - ./daprd
      - -app-id
      - seserver-auth
      - -app-port
      - "80"
      - -components-path
      - /components
      - -config
      - /configuration/seserver-config.yaml
    container_name: seserver-auth-dapr
    depends_on:
      seserver-auth:
        condition: service_started
        required: true
    image: daprio/daprd:latest
    network_mode: service:seserver-auth
    volumes:
      - type: bind
        source: D:\aspdotnet\SEServer\dapr\components
        target: /components
        bind:
          create_host_path: true
      - type: bind
        source: D:\aspdotnet\SEServer\dapr\configuration
        target: /configuration
        bind:
          create_host_path: true
  sqlserver:
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: JWmTjvNnRfKcjvLo0r
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 1433
        published: "1433"
        protocol: tcp
    volumes:
      - type: volume
        source: seserver-sqlserver
        target: /var/opt/mssql
        volume: {}
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin-slim:latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 9411
        published: "5411"
        protocol: tcp
networks:
  default:
    name: dockercompose37235877509304208_default
  elk:
    name: dockercompose37235877509304208_elk
volumes:
  seserver-sqlserver:
    name: dockercompose37235877509304208_seserver-sqlserver