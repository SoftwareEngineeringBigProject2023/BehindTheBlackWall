// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.SEServer.GameData.Resolvers
{
    public class GeneratedGameDataResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedGameDataResolver();

        private GeneratedGameDataResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedGameDataResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedGameDataResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedGameDataResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(13)
            {
                { typeof(global::System.Collections.Generic.Queue<global::SEServer.Data.NotifyData>), 0 },
                { typeof(global::System.Collections.Generic.Queue<global::SEServer.Data.SubmitData>), 1 },
                { typeof(global::SEServer.Data.CId), 2 },
                { typeof(global::SEServer.Data.EId), 3 },
                { typeof(global::SEServer.Data.NotifyData), 4 },
                { typeof(global::SEServer.Data.PlayerId), 5 },
                { typeof(global::SEServer.Data.SubmitData), 6 },
                { typeof(global::SEServer.GameData.GraphComponent), 7 },
                { typeof(global::SEServer.GameData.MoveInputComponent), 8 },
                { typeof(global::SEServer.GameData.PlayerComponent), 9 },
                { typeof(global::SEServer.GameData.PlayerMessageComponent), 10 },
                { typeof(global::SEServer.GameData.PlayerNotifyComponent), 11 },
                { typeof(global::SEServer.GameData.TransformComponent), 12 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.QueueFormatter<global::SEServer.Data.NotifyData>();
                case 1: return new global::MessagePack.Formatters.QueueFormatter<global::SEServer.Data.SubmitData>();
                case 2: return new MessagePack.SEServer.GameData.Formatters.SEServer.Data.CIdFormatter();
                case 3: return new MessagePack.SEServer.GameData.Formatters.SEServer.Data.EIdFormatter();
                case 4: return new MessagePack.SEServer.GameData.Formatters.SEServer.Data.NotifyDataFormatter();
                case 5: return new MessagePack.SEServer.GameData.Formatters.SEServer.Data.PlayerIdFormatter();
                case 6: return new MessagePack.SEServer.GameData.Formatters.SEServer.Data.SubmitDataFormatter();
                case 7: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.GraphComponentFormatter();
                case 8: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.MoveInputComponentFormatter();
                case 9: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.PlayerComponentFormatter();
                case 10: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.PlayerMessageComponentFormatter();
                case 11: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.PlayerNotifyComponentFormatter();
                case 12: return new MessagePack.SEServer.GameData.Formatters.SEServer.GameData.TransformComponentFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.SEServer.GameData.Formatters.SEServer.Data
{
    public sealed class CIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.Data.CId>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.Data.CId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.Id);
        }

        public global::SEServer.Data.CId Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.Data.CId();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.Data.EId>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.Data.EId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.Id);
        }

        public global::SEServer.Data.EId Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.Data.EId();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NotifyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.Data.NotifyData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.Data.NotifyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Type);
            writer.Write(value.Arg0);
            writer.Write(value.Arg1);
            writer.Write(value.Arg2);
            writer.Write(value.Arg3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Info, options);
            writer.Write(value.Data);
        }

        public global::SEServer.Data.NotifyData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.Data.NotifyData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Type = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Arg0 = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.Arg1 = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.Arg2 = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.Arg3 = reader.ReadInt32();
                        break;
                    case 5:
                        ____result.Info = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.Data = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.Data.PlayerId>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.Data.PlayerId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.Id);
        }

        public global::SEServer.Data.PlayerId Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.Data.PlayerId();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SubmitDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.Data.SubmitData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.Data.SubmitData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Type);
            writer.Write(value.Arg0);
            writer.Write(value.Arg1);
            writer.Write(value.Arg2);
            writer.Write(value.Arg3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Info, options);
            writer.Write(value.Data);
        }

        public global::SEServer.Data.SubmitData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.Data.SubmitData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Type = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Arg0 = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.Arg1 = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.Arg2 = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.Arg3 = reader.ReadInt32();
                        break;
                    case 5:
                        ____result.Info = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.Data = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.SEServer.GameData.Formatters.SEServer.GameData
{
    public sealed class GraphComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.GraphComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.GraphComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
        }

        public global::SEServer.GameData.GraphComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.GraphComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MoveInputComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.MoveInputComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.MoveInputComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            writer.Write(value.IsDirty);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.PlayerId>(formatterResolver).Serialize(ref writer, value.Owner, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Numerics.Vector2>(formatterResolver).Serialize(ref writer, value.Input, options);
        }

        public global::SEServer.GameData.MoveInputComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.MoveInputComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.IsDirty = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.Owner = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.PlayerId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Input = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Numerics.Vector2>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.PlayerComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.PlayerComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            writer.Write(value.PlayerId);
        }

        public global::SEServer.GameData.PlayerComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.PlayerComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.PlayerId = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerMessageComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.PlayerMessageComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.PlayerMessageComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            writer.Write(value.IsDirty);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.PlayerId>(formatterResolver).Serialize(ref writer, value.Owner, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Queue<global::SEServer.Data.SubmitData>>(formatterResolver).Serialize(ref writer, value.SubmitMessages, options);
        }

        public global::SEServer.GameData.PlayerMessageComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.PlayerMessageComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.IsDirty = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.Owner = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.PlayerId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.SubmitMessages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Queue<global::SEServer.Data.SubmitData>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerNotifyComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.PlayerNotifyComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.PlayerNotifyComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            writer.Write(value.IsDirty);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Queue<global::SEServer.Data.NotifyData>>(formatterResolver).Serialize(ref writer, value.NotifyMessages, options);
        }

        public global::SEServer.GameData.PlayerNotifyComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.PlayerNotifyComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.IsDirty = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.NotifyMessages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Queue<global::SEServer.Data.NotifyData>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TransformComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SEServer.GameData.TransformComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SEServer.GameData.TransformComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Numerics.Vector2>(formatterResolver).Serialize(ref writer, value.Position, options);
        }

        public global::SEServer.GameData.TransformComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SEServer.GameData.TransformComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.CId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::SEServer.Data.EId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Position = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Numerics.Vector2>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

